// <auto-generated />
using System;
using Diabetes.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diabetes.Repository.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20250423234348_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Diabetes.Core.Entities.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ID");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Alarm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("AlarmTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlarmType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CasualUserID");

                    b.ToTable("Alarms", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.BloodSugar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<double>("GlucoseLevel")
                        .HasColumnType("float");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("CasualUserID");

                    b.ToTable("BloodSugars", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.CasualUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.ToTable("CasualUsers", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotAnswerCasualUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<int>("ChatbotQuestionCasualUserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CasualUserID");

                    b.HasIndex("ChatbotQuestionCasualUserID")
                        .IsUnique();

                    b.ToTable("ChatbotAnswerCasualUsers", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotAnswerDoctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChatbotQuestionDoctorID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ChatbotQuestionDoctorID")
                        .IsUnique();

                    b.HasIndex("DoctorID");

                    b.ToTable("ChatbotAnswerDoctors", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionCasualUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.ToTable("ChatbotQuestionCasualUsers", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionDoctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.ToTable("ChatbotQuestionDoctors", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotResultCasualUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CasualUserID")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("CasualUserID");

                    b.HasIndex("ResultDate");

                    b.ToTable("ChatbotResultCasualUsers", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Clerk", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.ToTable("Clerks", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.DiagnosisType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("DiagnosisTypes", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorSpecialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalSyndicateCardNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.DoctorApproval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID")
                        .IsUnique();

                    b.HasIndex("OrganizationID");

                    b.ToTable("DoctorApprovals", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.FoodItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GlycemicCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GlycemicIndex")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("FoodItems", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID")
                        .IsUnique()
                        .HasFilter("[AdminID] IS NOT NULL");

                    b.ToTable("Managers", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.MedicalHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosisTypeID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiagnosisTypeID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("MedicalHistories", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Organization", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsMedicalSyndicate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClerkID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.HasIndex("ClerkID");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VideoURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.SuggestedFood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("FoodItemID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuggestedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("FoodItemID");

                    b.HasIndex("PatientID");

                    b.ToTable("SuggestedFoods", (string)null);
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<int>("DoctorsID")
                        .HasColumnType("int");

                    b.Property<int>("PatientsID")
                        .HasColumnType("int");

                    b.HasKey("DoctorsID", "PatientsID");

                    b.HasIndex("PatientsID");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Alarm", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("Alarms")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasualUser");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.BloodSugar", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("BloodSugars")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasualUser");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.CasualUser", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("CasualUsers")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotAnswerCasualUser", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("ChatbotAnswerCasualUsers")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.ChatbotQuestionCasualUser", "ChatbotQuestionCasualUser")
                        .WithOne("ChatbotAnswerCasualUser")
                        .HasForeignKey("Diabetes.Core.Entities.ChatbotAnswerCasualUser", "ChatbotQuestionCasualUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CasualUser");

                    b.Navigation("ChatbotQuestionCasualUser");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotAnswerDoctor", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.ChatbotQuestionDoctor", "ChatbotQuestionDoctor")
                        .WithOne("ChatbotAnswerDoctor")
                        .HasForeignKey("Diabetes.Core.Entities.ChatbotAnswerDoctor", "ChatbotQuestionDoctorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("ChatbotAnswerDoctors")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChatbotQuestionDoctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionCasualUser", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("ChatbotQuestionCasualUsers")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionDoctor", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("ChatbotQuestionDoctors")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotResultCasualUser", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.CasualUser", "CasualUser")
                        .WithMany("ChatbotResultCasualUsers")
                        .HasForeignKey("CasualUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasualUser");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Clerk", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Clerks")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Doctor", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Doctors")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.DoctorApproval", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithOne("DoctorApproval")
                        .HasForeignKey("Diabetes.Core.Entities.DoctorApproval", "DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Organization", "Organization")
                        .WithMany("DoctorApprovals")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Manager", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithOne("Manager")
                        .HasForeignKey("Diabetes.Core.Entities.Manager", "AdminID");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.MedicalHistory", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.DiagnosisType", "DiagnosisType")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("DiagnosisTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosisType");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Organization", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Organizations")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Patient", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Admin", "Admin")
                        .WithMany("Patients")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Clerk", "Clerk")
                        .WithMany("Patients")
                        .HasForeignKey("ClerkID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Clerk");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Post", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Organization", "Organization")
                        .WithMany("Posts")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.SuggestedFood", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Doctor", "Doctor")
                        .WithMany("SuggestedFoods")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.FoodItem", "FoodItem")
                        .WithMany("SuggestedFoods")
                        .HasForeignKey("FoodItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Patient", "Patient")
                        .WithMany("SuggestedFoods")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("FoodItem");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diabetes.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Diabetes.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Admin", b =>
                {
                    b.Navigation("CasualUsers");

                    b.Navigation("ChatbotQuestionCasualUsers");

                    b.Navigation("ChatbotQuestionDoctors");

                    b.Navigation("Clerks");

                    b.Navigation("Doctors");

                    b.Navigation("Manager")
                        .IsRequired();

                    b.Navigation("Organizations");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.CasualUser", b =>
                {
                    b.Navigation("Alarms");

                    b.Navigation("BloodSugars");

                    b.Navigation("ChatbotAnswerCasualUsers");

                    b.Navigation("ChatbotResultCasualUsers");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionCasualUser", b =>
                {
                    b.Navigation("ChatbotAnswerCasualUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Diabetes.Core.Entities.ChatbotQuestionDoctor", b =>
                {
                    b.Navigation("ChatbotAnswerDoctor")
                        .IsRequired();
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Clerk", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.DiagnosisType", b =>
                {
                    b.Navigation("MedicalHistories");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Doctor", b =>
                {
                    b.Navigation("ChatbotAnswerDoctors");

                    b.Navigation("DoctorApproval")
                        .IsRequired();

                    b.Navigation("MedicalHistories");

                    b.Navigation("SuggestedFoods");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.FoodItem", b =>
                {
                    b.Navigation("SuggestedFoods");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Organization", b =>
                {
                    b.Navigation("DoctorApprovals");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Diabetes.Core.Entities.Patient", b =>
                {
                    b.Navigation("MedicalHistories");

                    b.Navigation("SuggestedFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
